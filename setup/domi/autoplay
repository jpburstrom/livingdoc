#!/usr/bin/env python 

import os
import subprocess
import threading
import time
import StringIO
from datetime import datetime
import sys
import RPi.GPIO as GPIO
from socket import *

import liblo

RASPIVIDCMD = ["raspivid"]
TIMETOWAITFORABORT = 0.5

#class for controlling the running and shutting down of raspivid
class RaspiVidController(threading.Thread):
    def __init__(self, timeout, hoehe, breite, framerate, bitrate):
        threading.Thread.__init__(self)

        #setup the raspivid cmd
        self.raspividcmd = RASPIVIDCMD
        self.raspividcmd.append("-t")
        self.raspividcmd.append(str(timeout))
        self.raspividcmd.append("-f")
        self.raspividcmd.append("-vf")
        #self.raspividcmd.append(str(hoehe))
        #self.raspividcmd.append("-w")
        #self.raspividcmd.append(str(breite))
        self.raspividcmd.append("-fps")
        self.raspividcmd.append(str(framerate))
        self.raspividcmd.append("-hf")
        self.raspividcmd.append("-b")
        self.raspividcmd.append(str(bitrate))
        self.raspividcmd.append("-o")
        self.raspividcmd.append("-")

       # if preview == False: self.raspividcmd.append("-n")

        #set state to not running
        self.running = False

    def run(self):

        raspivid = subprocess.Popen(self.raspividcmd, shell=False, stdout=subprocess.PIPE)
        test = subprocess.Popen(["gst-launch-1.0", "-v", "fdsrc", "!", "h264parse", "!", "rtph264pay", "config-interval=1", "pt=96", "!", "gdppay", "!", "tcpserversink", "host=192.168.1.107", "port=5000"], shell=False, stdin=raspivid.stdout)

        #loop until its set to stopped or it stops
        self.running = True
        while(self.running and raspivid.poll() is None):
            time.sleep(TIMETOWAITFORABORT)
        self.running = False

        #kill raspivid if still running
        if raspivid.poll() == True or self.running==False:
            print "kill"
            try:
                raspivid.kill()
            except OSError:
                pass
            test.kill()

    def stopController(self):
        self.running = False

def start_stream(addr):
    vidcontrol = RaspiVidController("0", "720", "1080", "25", "1000000")
    print("Starting raspivid controller")
    vidcontrol.start()
    clientsocket = socket(AF_INET, SOCK_STREAM)
    clientsocket.connect(addr)
    data = clientsocket.recv(buf)
    return vidcontrol

def stop_stream(vidcontrol):
    clientsocket.close()
    print "Stopping raspivid controller"
    vidcontrol.stopController()
    vidcontrol.join()
    print "Done"



#test program
if __name__ == '__main__':

    global vidcontrol
    s = socket(AF_INET, SOCK_DGRAM)
    s.connect(('8.8.8.8', 1))  # connect() for UDP doesn't send packets
    local_ip_address = s.getsockname()[0]
    print local_ip_address

    host = '192.168.0.2'
    port = 55567
    buf = 1024

    try:
        server = liblo.Server(1234)
    except liblo.ServerError, err:
        print str(err)
        sys.exit()

    def start_callback(path, args):
        global vidcontrol
        vidcontrol = start_stream(addr)

    def stop_callback(path, args):
        global vidcontrol
        stop_stream(vidcontrol)

    server.add_method("/start", None, start_callback)
    server.add_method("/stop", None, stop_callback)

    addr = (host, port)


    try:
        while (True):
            server.recv(10)

    except KeyboardInterrupt:
        print "Cancelled by KeyboardInterrupt"
        vidcontrol.stopController()
        vidcontrol.join()
        exit()




